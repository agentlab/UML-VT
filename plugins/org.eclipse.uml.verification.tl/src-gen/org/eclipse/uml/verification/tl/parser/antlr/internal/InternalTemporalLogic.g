/*
 * generated by Xtext 2.10.0
 */
grammar InternalTemporalLogic;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package org.eclipse.uml.verification.tl.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package org.eclipse.uml.verification.tl.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.eclipse.uml.verification.tl.services.TemporalLogicGrammarAccess;

}

@parser::members {

 	private TemporalLogicGrammarAccess grammarAccess;

    public InternalTemporalLogicParser(TokenStream input, TemporalLogicGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Model";
   	}

   	@Override
   	protected TemporalLogicGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleModel
entryRuleModel returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getModelRule()); }
	iv_ruleModel=ruleModel
	{ $current=$iv_ruleModel.current; }
	EOF;

// Rule Model
ruleModel returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getModelAccess().getLocationImportParserRuleCall_0_0());
				}
				lv_location_0_0=ruleImport
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getModelRule());
					}
					set(
						$current,
						"location",
						lv_location_0_0,
						"org.eclipse.uml.verification.tl.TemporalLogic.Import");
					afterParserOrEnumRuleCall();
				}
			)
		)?
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getProperty1Property1ParserRuleCall_1_0_0());
					}
					lv_property1_1_0=ruleProperty1
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"property1",
							lv_property1_1_0,
							"org.eclipse.uml.verification.tl.TemporalLogic.Property1");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getModelAccess().getProperty2Property2ParserRuleCall_1_1_0());
					}
					lv_property2_2_0=ruleProperty2
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getModelRule());
						}
						add(
							$current,
							"property2",
							lv_property2_2_0,
							"org.eclipse.uml.verification.tl.TemporalLogic.Property2");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleOption
entryRuleOption returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getOptionRule()); }
	iv_ruleOption=ruleOption
	{ $current=$iv_ruleOption.current; }
	EOF;

// Rule Option
ruleOption returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getOptionAccess().getProperty1ParserRuleCall_0());
		}
		this_Property1_0=ruleProperty1
		{
			$current = $this_Property1_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getOptionAccess().getProperty2ParserRuleCall_1());
		}
		this_Property2_1=ruleProperty2
		{
			$current = $this_Property2_1.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleImport
entryRuleImport returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getImportRule()); }
	iv_ruleImport=ruleImport
	{ $current=$iv_ruleImport.current; }
	EOF;

// Rule Import
ruleImport returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='import'
		{
			newLeafNode(otherlv_0, grammarAccess.getImportAccess().getImportKeyword_0());
		}
		(
			(
				lv_model_1_0=RULE_STRING
				{
					newLeafNode(lv_model_1_0, grammarAccess.getImportAccess().getModelSTRINGTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getImportRule());
					}
					setWithLastConsumed(
						$current,
						"model",
						lv_model_1_0,
						"org.eclipse.xtext.common.Terminals.STRING");
				}
			)
		)
	)
;

// Entry rule entryRuleProperty1
entryRuleProperty1 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProperty1Rule()); }
	iv_ruleProperty1=ruleProperty1
	{ $current=$iv_ruleProperty1.current; }
	EOF;

// Rule Property1
ruleProperty1 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				(
					lv_operator_0_1='AG'
					{
						newLeafNode(lv_operator_0_1, grammarAccess.getProperty1Access().getOperatorAGKeyword_0_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_1, null);
					}
					    |
					lv_operator_0_2='AF'
					{
						newLeafNode(lv_operator_0_2, grammarAccess.getProperty1Access().getOperatorAFKeyword_0_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_2, null);
					}
					    |
					lv_operator_0_3='EG'
					{
						newLeafNode(lv_operator_0_3, grammarAccess.getProperty1Access().getOperatorEGKeyword_0_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_3, null);
					}
					    |
					lv_operator_0_4='EF'
					{
						newLeafNode(lv_operator_0_4, grammarAccess.getProperty1Access().getOperatorEFKeyword_0_0_3());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_4, null);
					}
					    |
					lv_operator_0_5='NOT'
					{
						newLeafNode(lv_operator_0_5, grammarAccess.getProperty1Access().getOperatorNOTKeyword_0_0_4());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_5, null);
					}
					    |
					lv_operator_0_6='G'
					{
						newLeafNode(lv_operator_0_6, grammarAccess.getProperty1Access().getOperatorGKeyword_0_0_5());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_6, null);
					}
					    |
					lv_operator_0_7='F'
					{
						newLeafNode(lv_operator_0_7, grammarAccess.getProperty1Access().getOperatorFKeyword_0_0_6());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_0_7, null);
					}
				)
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getProperty1Access().getLeftParenthesisKeyword_1());
		}
		(
			(
				(
					lv_modelElement1_2_0=RULE_TEST
					{
						newLeafNode(lv_modelElement1_2_0, grammarAccess.getProperty1Access().getModelElement1TESTTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty1Rule());
						}
						setWithLastConsumed(
							$current,
							"modelElement1",
							lv_modelElement1_2_0,
							"org.eclipse.uml.verification.tl.TemporalLogic.TEST");
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getProperty1Access().getNextOptionParserRuleCall_2_1_0());
					}
					lv_next_3_0=ruleOption
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getProperty1Rule());
						}
						add(
							$current,
							"next",
							lv_next_3_0,
							"org.eclipse.uml.verification.tl.TemporalLogic.Option");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
		otherlv_4=')'
		{
			newLeafNode(otherlv_4, grammarAccess.getProperty1Access().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleProperty2
entryRuleProperty2 returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getProperty2Rule()); }
	iv_ruleProperty2=ruleProperty2
	{ $current=$iv_ruleProperty2.current; }
	EOF;

// Rule Property2
ruleProperty2 returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				lv_modelElement1_0_0=RULE_TEST
				{
					newLeafNode(lv_modelElement1_0_0, grammarAccess.getProperty2Access().getModelElement1TESTTerminalRuleCall_0_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getProperty2Rule());
					}
					setWithLastConsumed(
						$current,
						"modelElement1",
						lv_modelElement1_0_0,
						"org.eclipse.uml.verification.tl.TemporalLogic.TEST");
				}
			)
		)
		(
			(
				(
					lv_operator_1_1='AND'
					{
						newLeafNode(lv_operator_1_1, grammarAccess.getProperty2Access().getOperatorANDKeyword_1_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty2Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_1_1, null);
					}
					    |
					lv_operator_1_2='OR'
					{
						newLeafNode(lv_operator_1_2, grammarAccess.getProperty2Access().getOperatorORKeyword_1_0_1());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty2Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_1_2, null);
					}
					    |
					lv_operator_1_3='=>'
					{
						newLeafNode(lv_operator_1_3, grammarAccess.getProperty2Access().getOperatorEqualsSignGreaterThanSignKeyword_1_0_2());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty2Rule());
						}
						setWithLastConsumed($current, "operator", lv_operator_1_3, null);
					}
				)
			)
		)
		(
			(
				(
					lv_modelElement2_2_0=RULE_TEST
					{
						newLeafNode(lv_modelElement2_2_0, grammarAccess.getProperty2Access().getModelElement2TESTTerminalRuleCall_2_0_0());
					}
					{
						if ($current==null) {
							$current = createModelElement(grammarAccess.getProperty2Rule());
						}
						setWithLastConsumed(
							$current,
							"modelElement2",
							lv_modelElement2_2_0,
							"org.eclipse.uml.verification.tl.TemporalLogic.TEST");
					}
				)
			)
			    |
			(
				otherlv_3='('
				{
					newLeafNode(otherlv_3, grammarAccess.getProperty2Access().getLeftParenthesisKeyword_2_1_0());
				}
				(
					(
						{
							newCompositeNode(grammarAccess.getProperty2Access().getNextOptionParserRuleCall_2_1_1_0());
						}
						lv_next_4_0=ruleOption
						{
							if ($current==null) {
								$current = createModelElementForParent(grammarAccess.getProperty2Rule());
							}
							set(
								$current,
								"next",
								lv_next_4_0,
								"org.eclipse.uml.verification.tl.TemporalLogic.Option");
							afterParserOrEnumRuleCall();
						}
					)
				)
				otherlv_5=')'
				{
					newLeafNode(otherlv_5, grammarAccess.getProperty2Access().getRightParenthesisKeyword_2_1_2());
				}
			)
		)
	)
;

RULE_TEST : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'::'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
