/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.uml.verification.tl.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class TemporalLogicGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.uml.verification.tl.TemporalLogic.Model");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLocationAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLocationImportParserRuleCall_0_0 = (RuleCall)cLocationAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cProperty1Assignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final RuleCall cProperty1Property1ParserRuleCall_1_0_0 = (RuleCall)cProperty1Assignment_1_0.eContents().get(0);
		private final Assignment cProperty2Assignment_1_1 = (Assignment)cAlternatives_1.eContents().get(1);
		private final RuleCall cProperty2Property2ParserRuleCall_1_1_0 = (RuleCall)cProperty2Assignment_1_1.eContents().get(0);
		
		//Model:
		//	location=Import? (property1+=Property1 | property2+=Property2)*;
		@Override public ParserRule getRule() { return rule; }
		
		//location=Import? (property1+=Property1 | property2+=Property2)*
		public Group getGroup() { return cGroup; }
		
		//location=Import?
		public Assignment getLocationAssignment_0() { return cLocationAssignment_0; }
		
		//Import
		public RuleCall getLocationImportParserRuleCall_0_0() { return cLocationImportParserRuleCall_0_0; }
		
		//(property1+=Property1 | property2+=Property2)*
		public Alternatives getAlternatives_1() { return cAlternatives_1; }
		
		//property1+=Property1
		public Assignment getProperty1Assignment_1_0() { return cProperty1Assignment_1_0; }
		
		//Property1
		public RuleCall getProperty1Property1ParserRuleCall_1_0_0() { return cProperty1Property1ParserRuleCall_1_0_0; }
		
		//property2+=Property2
		public Assignment getProperty2Assignment_1_1() { return cProperty2Assignment_1_1; }
		
		//Property2
		public RuleCall getProperty2Property2ParserRuleCall_1_1_0() { return cProperty2Property2ParserRuleCall_1_1_0; }
	}
	public class OptionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.uml.verification.tl.TemporalLogic.Option");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cProperty1ParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cProperty2ParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//Option:
		//	Property1 | Property2;
		@Override public ParserRule getRule() { return rule; }
		
		//Property1 | Property2
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//Property1
		public RuleCall getProperty1ParserRuleCall_0() { return cProperty1ParserRuleCall_0; }
		
		//Property2
		public RuleCall getProperty2ParserRuleCall_1() { return cProperty2ParserRuleCall_1; }
	}
	public class ImportElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.uml.verification.tl.TemporalLogic.Import");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cImportKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cModelAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cModelSTRINGTerminalRuleCall_1_0 = (RuleCall)cModelAssignment_1.eContents().get(0);
		
		//Import:
		//	'import' model=STRING;
		@Override public ParserRule getRule() { return rule; }
		
		//'import' model=STRING
		public Group getGroup() { return cGroup; }
		
		//'import'
		public Keyword getImportKeyword_0() { return cImportKeyword_0; }
		
		//model=STRING
		public Assignment getModelAssignment_1() { return cModelAssignment_1; }
		
		//STRING
		public RuleCall getModelSTRINGTerminalRuleCall_1_0() { return cModelSTRINGTerminalRuleCall_1_0; }
	}
	public class Property1Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.uml.verification.tl.TemporalLogic.Property1");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Alternatives cOperatorAlternatives_0_0 = (Alternatives)cOperatorAssignment_0.eContents().get(0);
		private final Keyword cOperatorAGKeyword_0_0_0 = (Keyword)cOperatorAlternatives_0_0.eContents().get(0);
		private final Keyword cOperatorAFKeyword_0_0_1 = (Keyword)cOperatorAlternatives_0_0.eContents().get(1);
		private final Keyword cOperatorEGKeyword_0_0_2 = (Keyword)cOperatorAlternatives_0_0.eContents().get(2);
		private final Keyword cOperatorEFKeyword_0_0_3 = (Keyword)cOperatorAlternatives_0_0.eContents().get(3);
		private final Keyword cOperatorNOTKeyword_0_0_4 = (Keyword)cOperatorAlternatives_0_0.eContents().get(4);
		private final Keyword cOperatorGKeyword_0_0_5 = (Keyword)cOperatorAlternatives_0_0.eContents().get(5);
		private final Keyword cOperatorFKeyword_0_0_6 = (Keyword)cOperatorAlternatives_0_0.eContents().get(6);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cModelElement1Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cModelElement1TESTTerminalRuleCall_2_0_0 = (RuleCall)cModelElement1Assignment_2_0.eContents().get(0);
		private final Assignment cNextAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cNextOptionParserRuleCall_2_1_0 = (RuleCall)cNextAssignment_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//Property1:
		//	operator=('AG' | 'AF' | 'EG' | 'EF' | 'NOT' | 'G' | 'F') '(' (modelElement1=TEST | next+=Option) ')';
		@Override public ParserRule getRule() { return rule; }
		
		//operator=('AG' | 'AF' | 'EG' | 'EF' | 'NOT' | 'G' | 'F') '(' (modelElement1=TEST | next+=Option) ')'
		public Group getGroup() { return cGroup; }
		
		//operator=('AG' | 'AF' | 'EG' | 'EF' | 'NOT' | 'G' | 'F')
		public Assignment getOperatorAssignment_0() { return cOperatorAssignment_0; }
		
		//('AG' | 'AF' | 'EG' | 'EF' | 'NOT' | 'G' | 'F')
		public Alternatives getOperatorAlternatives_0_0() { return cOperatorAlternatives_0_0; }
		
		//'AG'
		public Keyword getOperatorAGKeyword_0_0_0() { return cOperatorAGKeyword_0_0_0; }
		
		//'AF'
		public Keyword getOperatorAFKeyword_0_0_1() { return cOperatorAFKeyword_0_0_1; }
		
		//'EG'
		public Keyword getOperatorEGKeyword_0_0_2() { return cOperatorEGKeyword_0_0_2; }
		
		//'EF'
		public Keyword getOperatorEFKeyword_0_0_3() { return cOperatorEFKeyword_0_0_3; }
		
		//'NOT'
		public Keyword getOperatorNOTKeyword_0_0_4() { return cOperatorNOTKeyword_0_0_4; }
		
		//'G'
		public Keyword getOperatorGKeyword_0_0_5() { return cOperatorGKeyword_0_0_5; }
		
		//'F'
		public Keyword getOperatorFKeyword_0_0_6() { return cOperatorFKeyword_0_0_6; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//(modelElement1=TEST | next+=Option)
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//modelElement1=TEST
		public Assignment getModelElement1Assignment_2_0() { return cModelElement1Assignment_2_0; }
		
		//TEST
		public RuleCall getModelElement1TESTTerminalRuleCall_2_0_0() { return cModelElement1TESTTerminalRuleCall_2_0_0; }
		
		//next+=Option
		public Assignment getNextAssignment_2_1() { return cNextAssignment_2_1; }
		
		//Option
		public RuleCall getNextOptionParserRuleCall_2_1_0() { return cNextOptionParserRuleCall_2_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class Property2Elements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.uml.verification.tl.TemporalLogic.Property2");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cModelElement1Assignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cModelElement1TESTTerminalRuleCall_0_0 = (RuleCall)cModelElement1Assignment_0.eContents().get(0);
		private final Assignment cOperatorAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_0 = (Alternatives)cOperatorAssignment_1.eContents().get(0);
		private final Keyword cOperatorANDKeyword_1_0_0 = (Keyword)cOperatorAlternatives_1_0.eContents().get(0);
		private final Keyword cOperatorORKeyword_1_0_1 = (Keyword)cOperatorAlternatives_1_0.eContents().get(1);
		private final Keyword cOperatorEqualsSignGreaterThanSignKeyword_1_0_2 = (Keyword)cOperatorAlternatives_1_0.eContents().get(2);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cModelElement2Assignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cModelElement2TESTTerminalRuleCall_2_0_0 = (RuleCall)cModelElement2Assignment_2_0.eContents().get(0);
		private final Group cGroup_2_1 = (Group)cAlternatives_2.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2_1_0 = (Keyword)cGroup_2_1.eContents().get(0);
		private final Assignment cNextAssignment_2_1_1 = (Assignment)cGroup_2_1.eContents().get(1);
		private final RuleCall cNextOptionParserRuleCall_2_1_1_0 = (RuleCall)cNextAssignment_2_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_2_1_2 = (Keyword)cGroup_2_1.eContents().get(2);
		
		//Property2:
		//	modelElement1=TEST operator=('AND' | 'OR' | '=>') (modelElement2=TEST | '(' next=Option ')');
		@Override public ParserRule getRule() { return rule; }
		
		//modelElement1=TEST operator=('AND' | 'OR' | '=>') (modelElement2=TEST | '(' next=Option ')')
		public Group getGroup() { return cGroup; }
		
		//modelElement1=TEST
		public Assignment getModelElement1Assignment_0() { return cModelElement1Assignment_0; }
		
		//TEST
		public RuleCall getModelElement1TESTTerminalRuleCall_0_0() { return cModelElement1TESTTerminalRuleCall_0_0; }
		
		//operator=('AND' | 'OR' | '=>')
		public Assignment getOperatorAssignment_1() { return cOperatorAssignment_1; }
		
		//('AND' | 'OR' | '=>')
		public Alternatives getOperatorAlternatives_1_0() { return cOperatorAlternatives_1_0; }
		
		//'AND'
		public Keyword getOperatorANDKeyword_1_0_0() { return cOperatorANDKeyword_1_0_0; }
		
		//'OR'
		public Keyword getOperatorORKeyword_1_0_1() { return cOperatorORKeyword_1_0_1; }
		
		//'=>'
		public Keyword getOperatorEqualsSignGreaterThanSignKeyword_1_0_2() { return cOperatorEqualsSignGreaterThanSignKeyword_1_0_2; }
		
		//(modelElement2=TEST | '(' next=Option ')')
		public Alternatives getAlternatives_2() { return cAlternatives_2; }
		
		//modelElement2=TEST
		public Assignment getModelElement2Assignment_2_0() { return cModelElement2Assignment_2_0; }
		
		//TEST
		public RuleCall getModelElement2TESTTerminalRuleCall_2_0_0() { return cModelElement2TESTTerminalRuleCall_2_0_0; }
		
		//'(' next=Option ')'
		public Group getGroup_2_1() { return cGroup_2_1; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2_1_0() { return cLeftParenthesisKeyword_2_1_0; }
		
		//next=Option
		public Assignment getNextAssignment_2_1_1() { return cNextAssignment_2_1_1; }
		
		//Option
		public RuleCall getNextOptionParserRuleCall_2_1_1_0() { return cNextOptionParserRuleCall_2_1_1_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_2_1_2() { return cRightParenthesisKeyword_2_1_2; }
	}
	
	
	private final ModelElements pModel;
	private final OptionElements pOption;
	private final ImportElements pImport;
	private final TerminalRule tTEST;
	private final Property1Elements pProperty1;
	private final Property2Elements pProperty2;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public TemporalLogicGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pOption = new OptionElements();
		this.pImport = new ImportElements();
		this.tTEST = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "org.eclipse.uml.verification.tl.TemporalLogic.TEST");
		this.pProperty1 = new Property1Elements();
		this.pProperty2 = new Property2Elements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.eclipse.uml.verification.tl.TemporalLogic".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	location=Import? (property1+=Property1 | property2+=Property2)*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Option:
	//	Property1 | Property2;
	public OptionElements getOptionAccess() {
		return pOption;
	}
	
	public ParserRule getOptionRule() {
		return getOptionAccess().getRule();
	}
	
	//Import:
	//	'import' model=STRING;
	public ImportElements getImportAccess() {
		return pImport;
	}
	
	public ParserRule getImportRule() {
		return getImportAccess().getRule();
	}
	
	//terminal TEST:
	//	('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '::' | '0'..'9')*;
	public TerminalRule getTESTRule() {
		return tTEST;
	}
	
	//Property1:
	//	operator=('AG' | 'AF' | 'EG' | 'EF' | 'NOT' | 'G' | 'F') '(' (modelElement1=TEST | next+=Option) ')';
	public Property1Elements getProperty1Access() {
		return pProperty1;
	}
	
	public ParserRule getProperty1Rule() {
		return getProperty1Access().getRule();
	}
	
	//Property2:
	//	modelElement1=TEST operator=('AND' | 'OR' | '=>') (modelElement2=TEST | '(' next=Option ')');
	public Property2Elements getProperty2Access() {
		return pProperty2;
	}
	
	public ParserRule getProperty2Rule() {
		return getProperty2Access().getRule();
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/ *'->'* /';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
