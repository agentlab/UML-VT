/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.uml.verification.tl.validation

import org.eclipse.xtext.validation.Check
import org.eclipse.uml.verification.tl.temporalLogic.Property1
import org.eclipse.uml.verification.tl.temporalLogic.impl.ImportImpl
import org.eclipse.uml.verification.helper.ElementName
import org.eclipse.uml.verification.helper.LoadSelection
import org.eclipse.uml.verification.tl.temporalLogic.TemporalLogicPackage

/**
 * This class contains custom validation rules. 
 *
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
class TemporalLogicValidator extends AbstractTemporalLogicValidator {
	
	@Check 
	def void test(Property1 p) {
		if (p.eContainer.eAllContents.head.eContainer.eContents.head.class.canonicalName.equals("org.eclipse.uml.verification.temporalLogic.impl.ImportImpl")) {
			val tmp = p.eContainer.eAllContents.head.eContainer.eContents.head as ImportImpl
			val list = ElementName.getList(tmp.model)
			val MCselection = LoadSelection.getModelCheckerSelection(tmp.model);
	
			if (!list.contains(p.modelElement1)) {
				error("invalid name", TemporalLogicPackage.Literals.OPTION__MODEL_ELEMENT1)
			}
			
			val operator = p.operator;
			val t =operator.contains("E") ;
			val t2 =operator.contains("A") ;
			val t3 = (operator.contains("E") || operator.contains("A")) ;
			
			if (MCselection.equals("spin")){
				if (operator.contains("E") || operator.equals("AG ") || operator.equals("AF ") )
					error("CTL Formulas are not supported for the chosen model checker", TemporalLogicPackage.Literals.OPTION__MODEL_ELEMENT1)
			}
			else
			{
				if (!(operator.contains("E") || operator.contains("A")))
					error("LTL Formulas are not supported for the chosen model checker", TemporalLogicPackage.Literals.OPTION__MODEL_ELEMENT1)
			}
		}
	}
}
