/*
 * generated by Xtext 2.10.0
 */
package org.eclipse.uml.verification.tl.ide.contentassist.antlr;

import com.google.inject.Inject;
import java.util.Collection;
import java.util.HashMap;
import java.util.Map;
import org.antlr.runtime.RecognitionException;
import org.eclipse.uml.verification.tl.ide.contentassist.antlr.internal.InternalTemporalLogicParser;
import org.eclipse.uml.verification.tl.services.TemporalLogicGrammarAccess;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.FollowElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;

public class TemporalLogicParser extends AbstractContentAssistParser {

	@Inject
	private TemporalLogicGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalTemporalLogicParser createParser() {
		InternalTemporalLogicParser result = new InternalTemporalLogicParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getModelAccess().getAlternatives_1(), "rule__Model__Alternatives_1");
					put(grammarAccess.getOptionAccess().getAlternatives(), "rule__Option__Alternatives");
					put(grammarAccess.getProperty1Access().getOperatorAlternatives_0_0(), "rule__Property1__OperatorAlternatives_0_0");
					put(grammarAccess.getProperty1Access().getAlternatives_2(), "rule__Property1__Alternatives_2");
					put(grammarAccess.getProperty2Access().getOperatorAlternatives_1_0(), "rule__Property2__OperatorAlternatives_1_0");
					put(grammarAccess.getProperty2Access().getAlternatives_2(), "rule__Property2__Alternatives_2");
					put(grammarAccess.getModelAccess().getGroup(), "rule__Model__Group__0");
					put(grammarAccess.getImportAccess().getGroup(), "rule__Import__Group__0");
					put(grammarAccess.getProperty1Access().getGroup(), "rule__Property1__Group__0");
					put(grammarAccess.getProperty2Access().getGroup(), "rule__Property2__Group__0");
					put(grammarAccess.getProperty2Access().getGroup_2_1(), "rule__Property2__Group_2_1__0");
					put(grammarAccess.getModelAccess().getLocationAssignment_0(), "rule__Model__LocationAssignment_0");
					put(grammarAccess.getModelAccess().getProperty1Assignment_1_0(), "rule__Model__Property1Assignment_1_0");
					put(grammarAccess.getModelAccess().getProperty2Assignment_1_1(), "rule__Model__Property2Assignment_1_1");
					put(grammarAccess.getImportAccess().getModelAssignment_1(), "rule__Import__ModelAssignment_1");
					put(grammarAccess.getProperty1Access().getOperatorAssignment_0(), "rule__Property1__OperatorAssignment_0");
					put(grammarAccess.getProperty1Access().getModelElement1Assignment_2_0(), "rule__Property1__ModelElement1Assignment_2_0");
					put(grammarAccess.getProperty1Access().getNextAssignment_2_1(), "rule__Property1__NextAssignment_2_1");
					put(grammarAccess.getProperty2Access().getModelElement1Assignment_0(), "rule__Property2__ModelElement1Assignment_0");
					put(grammarAccess.getProperty2Access().getOperatorAssignment_1(), "rule__Property2__OperatorAssignment_1");
					put(grammarAccess.getProperty2Access().getModelElement2Assignment_2_0(), "rule__Property2__ModelElement2Assignment_2_0");
					put(grammarAccess.getProperty2Access().getNextAssignment_2_1_1(), "rule__Property2__NextAssignment_2_1_1");
				}
			};
		}
		return nameMappings.get(element);
	}

	@Override
	protected Collection<FollowElement> getFollowElements(AbstractInternalContentAssistParser parser) {
		try {
			InternalTemporalLogicParser typedParser = (InternalTemporalLogicParser) parser;
			typedParser.entryRuleModel();
			return typedParser.getFollowElements();
		} catch(RecognitionException ex) {
			throw new RuntimeException(ex);
		}
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public TemporalLogicGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(TemporalLogicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
