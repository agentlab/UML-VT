/*
 * generated by Xtext 2.10.0
 */
grammar InternalTemporalLogic;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package org.eclipse.uml.verification.tl.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package org.eclipse.uml.verification.tl.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import org.eclipse.uml.verification.tl.services.TemporalLogicGrammarAccess;

}
@parser::members {
	private TemporalLogicGrammarAccess grammarAccess;

	public void setGrammarAccess(TemporalLogicGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleModel
entryRuleModel
:
{ before(grammarAccess.getModelRule()); }
	 ruleModel
{ after(grammarAccess.getModelRule()); } 
	 EOF 
;

// Rule Model
ruleModel 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getModelAccess().getGroup()); }
		(rule__Model__Group__0)
		{ after(grammarAccess.getModelAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleOption
entryRuleOption
:
{ before(grammarAccess.getOptionRule()); }
	 ruleOption
{ after(grammarAccess.getOptionRule()); } 
	 EOF 
;

// Rule Option
ruleOption 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getOptionAccess().getAlternatives()); }
		(rule__Option__Alternatives)
		{ after(grammarAccess.getOptionAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleImport
entryRuleImport
:
{ before(grammarAccess.getImportRule()); }
	 ruleImport
{ after(grammarAccess.getImportRule()); } 
	 EOF 
;

// Rule Import
ruleImport 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getImportAccess().getGroup()); }
		(rule__Import__Group__0)
		{ after(grammarAccess.getImportAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty1
entryRuleProperty1
:
{ before(grammarAccess.getProperty1Rule()); }
	 ruleProperty1
{ after(grammarAccess.getProperty1Rule()); } 
	 EOF 
;

// Rule Property1
ruleProperty1 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProperty1Access().getGroup()); }
		(rule__Property1__Group__0)
		{ after(grammarAccess.getProperty1Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleProperty2
entryRuleProperty2
:
{ before(grammarAccess.getProperty2Rule()); }
	 ruleProperty2
{ after(grammarAccess.getProperty2Rule()); } 
	 EOF 
;

// Rule Property2
ruleProperty2 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getProperty2Access().getGroup()); }
		(rule__Property2__Group__0)
		{ after(grammarAccess.getProperty2Access().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProperty1Assignment_1_0()); }
		(rule__Model__Property1Assignment_1_0)
		{ after(grammarAccess.getModelAccess().getProperty1Assignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getModelAccess().getProperty2Assignment_1_1()); }
		(rule__Model__Property2Assignment_1_1)
		{ after(grammarAccess.getModelAccess().getProperty2Assignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Option__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getOptionAccess().getProperty1ParserRuleCall_0()); }
		ruleProperty1
		{ after(grammarAccess.getOptionAccess().getProperty1ParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getOptionAccess().getProperty2ParserRuleCall_1()); }
		ruleProperty2
		{ after(grammarAccess.getOptionAccess().getProperty2ParserRuleCall_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__OperatorAlternatives_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty1Access().getOperatorAGKeyword_0_0_0()); }
		'AG'
		{ after(grammarAccess.getProperty1Access().getOperatorAGKeyword_0_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getOperatorAFKeyword_0_0_1()); }
		'AF'
		{ after(grammarAccess.getProperty1Access().getOperatorAFKeyword_0_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getOperatorEGKeyword_0_0_2()); }
		'EG'
		{ after(grammarAccess.getProperty1Access().getOperatorEGKeyword_0_0_2()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getOperatorEFKeyword_0_0_3()); }
		'EF'
		{ after(grammarAccess.getProperty1Access().getOperatorEFKeyword_0_0_3()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getOperatorNOTKeyword_0_0_4()); }
		'NOT'
		{ after(grammarAccess.getProperty1Access().getOperatorNOTKeyword_0_0_4()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getOperatorGKeyword_0_0_5()); }
		'G'
		{ after(grammarAccess.getProperty1Access().getOperatorGKeyword_0_0_5()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getOperatorFKeyword_0_0_6()); }
		'F'
		{ after(grammarAccess.getProperty1Access().getOperatorFKeyword_0_0_6()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty1Access().getModelElement1Assignment_2_0()); }
		(rule__Property1__ModelElement1Assignment_2_0)
		{ after(grammarAccess.getProperty1Access().getModelElement1Assignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getProperty1Access().getNextAssignment_2_1()); }
		(rule__Property1__NextAssignment_2_1)
		{ after(grammarAccess.getProperty1Access().getNextAssignment_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__OperatorAlternatives_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty2Access().getOperatorANDKeyword_1_0_0()); }
		'AND'
		{ after(grammarAccess.getProperty2Access().getOperatorANDKeyword_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getProperty2Access().getOperatorORKeyword_1_0_1()); }
		'OR'
		{ after(grammarAccess.getProperty2Access().getOperatorORKeyword_1_0_1()); }
	)
	|
	(
		{ before(grammarAccess.getProperty2Access().getOperatorEqualsSignGreaterThanSignKeyword_1_0_2()); }
		'=>'
		{ after(grammarAccess.getProperty2Access().getOperatorEqualsSignGreaterThanSignKeyword_1_0_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Alternatives_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty2Access().getModelElement2Assignment_2_0()); }
		(rule__Property2__ModelElement2Assignment_2_0)
		{ after(grammarAccess.getProperty2Access().getModelElement2Assignment_2_0()); }
	)
	|
	(
		{ before(grammarAccess.getProperty2Access().getGroup_2_1()); }
		(rule__Property2__Group_2_1__0)
		{ after(grammarAccess.getProperty2Access().getGroup_2_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__0__Impl
	rule__Model__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getLocationAssignment_0()); }
	(rule__Model__LocationAssignment_0)?
	{ after(grammarAccess.getModelAccess().getLocationAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Model__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getModelAccess().getAlternatives_1()); }
	(rule__Model__Alternatives_1)*
	{ after(grammarAccess.getModelAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Import__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__0__Impl
	rule__Import__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getImportKeyword_0()); }
	'import'
	{ after(grammarAccess.getImportAccess().getImportKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Import__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getImportAccess().getModelAssignment_1()); }
	(rule__Import__ModelAssignment_1)
	{ after(grammarAccess.getImportAccess().getModelAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property1__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property1__Group__0__Impl
	rule__Property1__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty1Access().getOperatorAssignment_0()); }
	(rule__Property1__OperatorAssignment_0)
	{ after(grammarAccess.getProperty1Access().getOperatorAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property1__Group__1__Impl
	rule__Property1__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty1Access().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getProperty1Access().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property1__Group__2__Impl
	rule__Property1__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty1Access().getAlternatives_2()); }
	(rule__Property1__Alternatives_2)
	{ after(grammarAccess.getProperty1Access().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property1__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty1Access().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getProperty1Access().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property2__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property2__Group__0__Impl
	rule__Property2__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty2Access().getModelElement1Assignment_0()); }
	(rule__Property2__ModelElement1Assignment_0)
	{ after(grammarAccess.getProperty2Access().getModelElement1Assignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property2__Group__1__Impl
	rule__Property2__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty2Access().getOperatorAssignment_1()); }
	(rule__Property2__OperatorAssignment_1)
	{ after(grammarAccess.getProperty2Access().getOperatorAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property2__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty2Access().getAlternatives_2()); }
	(rule__Property2__Alternatives_2)
	{ after(grammarAccess.getProperty2Access().getAlternatives_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Property2__Group_2_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property2__Group_2_1__0__Impl
	rule__Property2__Group_2_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group_2_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty2Access().getLeftParenthesisKeyword_2_1_0()); }
	'('
	{ after(grammarAccess.getProperty2Access().getLeftParenthesisKeyword_2_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group_2_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property2__Group_2_1__1__Impl
	rule__Property2__Group_2_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group_2_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty2Access().getNextAssignment_2_1_1()); }
	(rule__Property2__NextAssignment_2_1_1)
	{ after(grammarAccess.getProperty2Access().getNextAssignment_2_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group_2_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Property2__Group_2_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__Group_2_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getProperty2Access().getRightParenthesisKeyword_2_1_2()); }
	')'
	{ after(grammarAccess.getProperty2Access().getRightParenthesisKeyword_2_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Model__LocationAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getLocationImportParserRuleCall_0_0()); }
		ruleImport
		{ after(grammarAccess.getModelAccess().getLocationImportParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Property1Assignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProperty1Property1ParserRuleCall_1_0_0()); }
		ruleProperty1
		{ after(grammarAccess.getModelAccess().getProperty1Property1ParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Model__Property2Assignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getModelAccess().getProperty2Property2ParserRuleCall_1_1_0()); }
		ruleProperty2
		{ after(grammarAccess.getModelAccess().getProperty2Property2ParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Import__ModelAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getImportAccess().getModelSTRINGTerminalRuleCall_1_0()); }
		RULE_STRING
		{ after(grammarAccess.getImportAccess().getModelSTRINGTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__OperatorAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty1Access().getOperatorAlternatives_0_0()); }
		(rule__Property1__OperatorAlternatives_0_0)
		{ after(grammarAccess.getProperty1Access().getOperatorAlternatives_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__ModelElement1Assignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty1Access().getModelElement1TESTTerminalRuleCall_2_0_0()); }
		RULE_TEST
		{ after(grammarAccess.getProperty1Access().getModelElement1TESTTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property1__NextAssignment_2_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty1Access().getNextOptionParserRuleCall_2_1_0()); }
		ruleOption
		{ after(grammarAccess.getProperty1Access().getNextOptionParserRuleCall_2_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__ModelElement1Assignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty2Access().getModelElement1TESTTerminalRuleCall_0_0()); }
		RULE_TEST
		{ after(grammarAccess.getProperty2Access().getModelElement1TESTTerminalRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__OperatorAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty2Access().getOperatorAlternatives_1_0()); }
		(rule__Property2__OperatorAlternatives_1_0)
		{ after(grammarAccess.getProperty2Access().getOperatorAlternatives_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__ModelElement2Assignment_2_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty2Access().getModelElement2TESTTerminalRuleCall_2_0_0()); }
		RULE_TEST
		{ after(grammarAccess.getProperty2Access().getModelElement2TESTTerminalRuleCall_2_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Property2__NextAssignment_2_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getProperty2Access().getNextOptionParserRuleCall_2_1_1_0()); }
		ruleOption
		{ after(grammarAccess.getProperty2Access().getNextOptionParserRuleCall_2_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_TEST : ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'::'|'0'..'9')*;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
